(function() {

  var data = {};


  var uniqueIdList = [];
  var d3Edges = [];
<<<<<<< HEAD
  var outlierList = [
1074970 ,
1336870 ,
1685871 ,
1763672 ,
1965716 ,
439584  ,
741636  ,
1322472 ,
1431963 ,
1443177 ,
1585206 ,
1635527 ,
1788664 ,
111758  ,
359044  ,
404087  ,
440242  ,
647574  ,
810212  ,
947419  ,
984542  ,
1232939 ,
1536714 ,
1576452 ,
1706569 ,
1809420 ,
2043478 ,
2049974 ,
272033  ,
353418  ,
355366  ,
395694  ,
554218  ,
736288  ,
1128912 ,
1496312 ,
1618639 ,
1736353 ,
1772990 ,
1781128 ,
1887790 ,
1988493 ,
2062993 ,
523977  ,
557608  ,
594316  ,
962522  ,
1189602 ,
1217836 ,
1221432 ,
1306211 ,
1308356 ,
1520446 ,
1640316 ,
1690685 ,
1758901 ,
1834564 ,
2016911 ,
77985 ,
241275  ,
460630  ,
672552  ,
712463  ,
845135  ,
953272  ,
1081515 ,
1337430 ,
1360635 ,
1379445 ,
1567292 ,
1621849 ,
1667325 ,
1816522 ,
1830372 ,
1853425 ,
1872990 ,
1939208 ,
1981451 ,
571588  ,
605020  ,
634474  ,
1009525 ,
1038231 ,
1135093 ,
1236601 ,
1685422 ,
1836644 ,
412589  ,
420615  ,
469357  ,
639730  ,
671599  ,
694491  ,
1030897 ,
1091841 ,
1455657 ,
1598265 ,
1906065 ,
1939292 ,
1959069 ,
2016064 ,
2055411 ,
267010  ,
388680  ,
593157  ,
1310461 ,
1352405 ,
1377615 ,
1414051 ,
1495984 ,
1517929 ,
1598831 ,
1668820 ,
1852033 ,
444008  ,
675561  ,
770923  ,
810496  ,
816686  ,
819126  ,
1085806 ,
1132882 ,
1134821 ,
1183890 ,
1401329 ,
1456293 ,
1478594 ,
1594971 ,
1709971 ,
1711548 ,
1716506 ,
1966429 ,
2010544 ,
356121  ,
439907  ,
646993  ,
1122884 ,
1358982 ,
1477221 ,
1857726 ,
412282  ,
752256  ,
1025484 ,
1059177 ,
1095464 ,
1307724 ,
1695941 ,
2007070 ,
411180  ,
481534  ,
750540  ,
861665  ,
888391  ,
917809  ,
1228908 ,
1264051 ,
1447202 ,
1528279 ,
1677351 ,
75849 ,
246860  ,
634799  ,
878878  ,
1376643 ,
1392457 ,
1901230 ,
1954188 ,
1966966 ,
2012017 ,
750163  ,
797787  ,
854341  ,
1027483 ,
1527767 ,
1699262 ,
1850479 ,
1885661 ,
2056864 ,
11311 ,
347770  ,
560932  ,
705542  ,
766218  ,
850324  ,
969256  ,
1759070 ,
84322 ,
161781  ,
183761  ,
193473  ,
198823  ,
223567  ,
271049  ,
415491  ,
549068  ,
614907  ,
1140789 ,
1591741 ,
1871927 ,
2004816 ,
134576  ,
365286  ,
619064  ,
752231  ,
886431  ,
1196605 ,
1280868 ,
1484413 ,
1609200 ,
1688712 ,
167470  ,
216057  ,
425099  ,
669018  ,
1315171 ,
1324081 ,
1474864 ,
1477437 ,
1483004 ,
1516513 ,
1591840 ,
1700834 ,
1803086 ,
2046019 ,
15712 ,
169687  ,
227192  ,
443711  ,
531348  ,
810887  ,
825652  ,
941235  ,
1011112 ,
1209830 ,
1295908 ,
1467932 ,
1567378 ,
1710455 ,
67142 ,
115296  ,
252796  ,
419953  ,
452524  ,
836515  ,
1117855 ,
1140347 ,
1219503 ,
1362332 ,
1452686 ,
1489451 ,
1518969 ,
1539142 ,
1571283 ,
1855484 ,
1862792 ,
2064511 ,
4343  ,
49111 ,
84438 ,
138464  ,
420195  ,
575073  ,
869478  ,
1201599 ,
1740708 ,
1948150 ,
2085080 ,
19162 ,
156751  ,
157752  ,
490718  ,
579897  ,
590704  ,
606198  ,
740577  ,
829460  ,
866601  ,
998575  ,
1095836 ,
1236917 ,
1428652 ,
1501359 ,
1558970 ,
1607208 ,
1731611 ,
1736603 ,
1898399 ,
2042186 ,
2090691 ,
11269 ,
40624 ,
91182 ,
115573  ,
125285  ,
332069  ,
520109  ,
538711  ,
609983  ,
627051  ,
744631  ,
946134  ,
956179  ,
1154392 ,
1196253 ,
1201916 ,
1234761 ,
1320651 ,
1323905 ,
1331768 ,
1357916 ,
1451127 ,
1502547 ,
1570579 ,
1613678 ,
1823379 ,
1843798 ,
1917755 ,
1932290 ,
1954538 ,
60633 ,
73415 ,
103006  ,
132087  ,
236573  ,
328350  ,
657863  ,
866007  ,
901652  ,
986641  ,
1229505 ,
1406001 ,
1614660 ,
1772261 ,
1794504 ,
1812418 ,
1849728 ,
1882540 ,
1915520 ,
19509 ,
77892 ,
214139  ,
242353  ,
340699  ,
407458  ,
408012  ,
476444  ,
564293  ,
644431  ,
645418  ,
745324  ,
799282  ,
930115  ,
1029542 ,
1216041 ,
1240527 ,
1400744 ,
1574042 ,
1586794 ,
1750619 ,
1831051 ,
1898006 ,
1941990 ,
1987241 ,
103422  ,
195248  ,
381150  ,
485035  ,
560979  ,
608482  ,
805058  ,
862889  ,
914446  ,
996258  ,
1030805 ,
1213994 ,
1713869 ,
1888873 ,
1965146 ,
2035400 ,
2096715 ,
111975  ,
382206  ,
394459  ,
404212  ,
492765  ,
1052726 ,
1083363 ,
1148243 ,
1439498 ,
1594599 ,
1642096 ,
1667330 ,
1729147 ,
1751308 ,
1784467 ,
1833168 ,
1854510 ,
1860592 ,
1916572 ,
1938259 ,
2028347 ,
2038469 ,
77124 ,
95206 ,
101592  ,
203184  ,
287831  ,
423283  ,
423379  ,
450819  ,
521692  ,
540914  ,
577571  ,
811616  ,
880166  ,
1086053 ,
1127216 ,
1144498 ,
1409020 ,
1434060 ,
1461139 ,
1660166 ,
1753286 ,
1822482 ,
1898284 ,
1908746 ,
1990578 ,
173232  ,
231401  ,
268968  ,
350693  ,
464613  ,
553559  ,
699326  ,
730971  ,
778821  ,
884921  ,
1136377 ,
1156947 ,
1180391 ,
1218201 ,
1237644 ,
1257239 ,
1385812 ,
1464019 ,
1494544 ,
1562186 ,
1679652 ,
1811210 ,
1865549 ,
1908621 ,
2010738 ,
2065333 ,
2068577 ,
2094112 ,
56467 ,
87053 ,
154530  ,
160360  ,
197786  ,
206687  ,
215593  ,
274315  ,
503822  ,
598893  ,
683940  ,
735230  ,
788576  ,
847619  ,
887960  ,
1016895 ,
1065547 ,
1188103 ,
1188959 ,
1191555 ,
1339498 ,
1383457 ,
1401128 ,
1483065 ,
1766671 ,
1776141 ,
1887849 ,
1953117 ,
47327 ,
121295  ,
164193  ,
273602  ,
285368  ,
516163  ,
610522  ,
638668  ,
702567  ,
805435  ,
942816  ,
954782  ,
1051722 ,
1243914 ,
1309481 ,
1613963 ,
1906384 ,
1921770 ,
1922302 ,
2006807 ,
2025656 ,
2060504 ,
20986 ,
245129  ,
468827  ,
508018  ,
535019  ,
539617  ,
544439  ,
612108  ,
715332  ,
770252  ,
854137  ,
880093  ,
881043  ,
979804  ,
1099687 ,
1155936 ,
1230858 ,
1268786 ,
1334702 ,
1498976 ,
1586378 ,
1731572 ,
1767836 ,
1779722 ,
1838047 ,
1849623 ,
70028 ,
125781  ,
180277  ,
455219  ,
457620  ,
675710  ,
786425  ,
793595  ,
854271  ,
910050  ,
938574  ,
1049333 ,
1079812 ,
1081552 ,
1217734 ,
1269504 ,
1310270 ,
1332445 ,
1439010 ,
1487615 ,
1727327 ,
1836265 ,
1843348 ,
2054562 ,
186115  ,
207300  ,
297330  ,
313073  ,
947796  ,
976932  ,
1235058 ,
1245603 ,
1402234 ,
1434450 ,
1459134 ,
1465836 ,
1469401 ,
1551364 ,
1554601 ,
1593258 ,
1737013 ,
1749640 ,
1827053 ,
1880304 ,
53898 ,
89618 ,
105331  ,
474586  ,
584668  ,
589381  ,
859038  ,
961303  ,
990811  ,
1080834 ,
1134427 ,
1287048 ,
1302430 ,
1455142 ,
1798127 ,
1815116 ,
2059961 ,
2080257 ,
15715 ,
45840 ,
400873  ,
656653  ,
684239  ,
749964  ,
811009  ,
943291  ,
998036  ,
1099345 ,
1103520 ,
1166845 ,
1194932 ,
1233136 ,
1276624 ,
1541685 ,
1828090 ,
1905468 ,
1908375 ,
1941845 ,
2012559 ,
372230  ,
383251  ,
810677  ,
903264  ,
930161  ,
1438698 ,
1480300 ,
1769864 ,
1871836 ,
2036467 ,
45138 ,
96972 ,
133312  ,
207530  ,
217095  ,
483295  ,
941089  ,
1168221 ,
1182572 ,
1492555 ,
1499757 ,
1566766 ,
1757507 ,
1795127 ,
1812068 ,
1819320 ,
1877708 ,
2024863 ,
40570 ,
132781  ,
423861  ,
528530  ,
573455  ,
744879  ,
871333  ,
893229  ,
1001533 ,
1436888 ,
1642758 ,
1672782 ,
2007598 ,
2040718 ,
114521  ,
121980  ,
130741  ,
130895  ,
590879  ,
909776  ,
1031660 ,
1118070 ,
1359667 ,
1413244 ,
1442611 ,
1557125 ,
1677597 ,
1719557 ,
1883690 ,
162948  ,
386827  ,
496679  ,
591150  ,
813316  ,
877394  ,
1430968 ,
1483318 ,
1543979 ,
1837225 ,
1991592 ,
2057127 ,
2059479 ,
254809  ,
641364  ,
726657  ,
943772  ,
979599  ,
1326348 ,
1337249 ,
1625046 ,
1945467 ,
1945506 ,
2048678 ,
163738  ,
248937  ,
891183  ,
1007202 ,
1497224 ,
1642537 ,
1826870 ,
1829621 ,
1883384 ,
1899383 ,
1906057 ,
2056082 ,
2072090 ,
69340 ,
218084  ,
386611  ,
572263  ,
746010  ,
1095099 ,
1106999 ,
1280655 ,
1320644 ,
1606070 ,
1612730 ,
1986003 ,
145135  ,
380345  ,
680685  ,
880619  ,
921389  ,
952202  ,
1636270 ,
1763638 ,
1836139 ,
1999088 ,
330141  ,
629339  ,
697944  ,
757027  ,
811356  ,
842645  ,
894528  ,
973383  ,
977857  ,
1000708 ,
1008236 ,
1673411 ,
1879195 ,
52671 ,
264185  ,
305083  ,
359592  ,
674787  ,
777006  ,
1296115 ,
1401559 ,
1463578 ,
1669109 ,
180789  ,
231868  ,
386585  ,
443085  ,
444736  ,
565653  ,
704292  ,
725044  ,
973520  ,
1540524 ,
1600283 ,
254180  ,
263011  ,
292339  ,
730966  ,
863916  ,
873560  ,
1029556 ,
1098136 ,
1341575 ,
1618488 ,
1699336 ,
1762242 ,
137608  ,
203167  ,
287114  ,
314497  ,
376940  ,
496306  ,
527693  ,
705064  ,
885723  ,
924388  ,
1533712 ,
1806328 ,
1844006 ,
1970184 ,
629585  ,
762485  ,
886397  ,
1093081 ,
1718771 ,
1819827 ,
69324 ,
120607  ,
467470  ,
692081  ,
692659  ,
740139  ,
835984  ,
1394394 ,
1639753 ,
1660730 ,
1803146 ,
1820085 ,
635878  ,
868222  ,
870289  ,
1203802 ,
1349555 ,
183441  ,
217701  ,
265933  ,
293920  ,
416135  ,
735477  ,
898955  ,
1331654 ,
1356646 ,
2015749 ,
13354 ,
200828  ,
317411  ,
567024  ,
969451  ,
1010817 ,
1261515 ,
1520389 ,
2080929 ,
76731 ,
81292 ,
1086857 ,
1631132 ,
1661506 ,
1980233 ,
25792 ,
239673  ,
288988  ,
829257  ,
961328  ,
1116214 ,
1138406 ,
1520987 ,
1566005 ,
1739976 ,
1886292 ,
2077170 ,
205315  ,
587055  ,
861673  ,
1115919 ,
1369183 ,
1590133 ,
1626299 ,
2027844 ,
158275  ,
187130  ,
504450  ,
966656  ,
1236441 ,
1322580 ,
1739582 ,
1770586 ,
1874212 ,
41289 ,
281931  ,
439678  ,
578583  ,
714076  ,
1034569 ,
1549032 ,
1675066 ,
1809394 ,
2079527 ,
108559  ,
117066  ,
476784  ,
1229412 ,
1528551 ,
1626169 ,
1683856 ,
1994529 ,
2038662 ,
328274  ,
400555  ,
1267460 ,
1509635 ,
1774855 ,
279576  ,
422300  ,
471557  ,
887962  ,
891094  ,
949503  ,
958301  ,
1067956 ,
1243186 ,
1288298 ,
1421418 ,
1515466 ,
596157  ,
873143  ,
1201815 ,
1517572 ,
1760325 ,
483809  ,
575701  ,
669970  ,
1739814 ,
1848525 ,
122907  ,
195087  ,
1132521 ,
1246537 ,
1543266 ,
267034  ,
273748  ,
637839  ,
1565051 ,
1973863 ,
154595  ,
1313613 ,
1335508 ,
2007515 ,
1626521 ,
1760095 ,
33357 ,
431280  ,
437077  ,
1286459 ,
1696282 ,
1839291 ,
1017164 ,
1165018 ,
487106  ,
1906760 ,
2014530 ,
78960 ,
1823547 ,
1825492 ,
1889737 ,
233486  ,
336328  ,
945959  ,
1155666 ,
1294321 ,
1809880 ,
180661  ,
921890  ,
1162853 ,
1201079 ,
683323  ,
726680  ,
749491  ,
857166  ,
452016  ,
499953  ,
662057  ,
663450  ,
1027276 ,
1406469 ,
1953824 ,
2034208 ,
312794  ,
944133  ,
1104264 ,
1248154 ,
261021  ,
511161  ,
610043  ,
643447  ,
189670  ,
559950  ,
1025781 ,
1048262 ,
1064898 ,
1210755 ,
1470439 ,
2023392 ,
2066972 ,
477168  ,
1247820 ,
1835458 ,
532442  ,
920852  ,
1365219 ,
1685011 ,
2011396 ,
328657  ,
1283679 ,
1389673 ,
1491001 ,
1576499 ,
661923  ,
620990  ,
1743218 ,
984199  ,
1087978 ,
1221875 ,
1653780 ,
697497  ,
919861  ,
1074829 ,
1088678 ,
1412235 ,
1934078 ,
766649  ,
1656259 ,
1933593 ,
1937834 ,
1958194 ,
505182  ,
1931591 ,
2084304 ,
546321  ,
847132  ,
1813844 ,
522186  ,
1820326 ,
372482  ,
1185012 ,
2031799 ,
711301  ,
1034322 ,
1075202 ,
1416498 ,
1789535 ,
186726  ,
213290  ,
903769  ,
207136  ,
1975742 ,
668484  ,
1513766 ,
774876  ,
974088  ,
1696430 ,
1725488 ,
1058644 ,
1131984 ,
1713815 ,
777171  ,
840221  ,
1762248 ,
1787637 ,
1790293 ,
1856188 ,
2065364 ,
1873443 ,
1344899 ,
1583686 ,
1337261 ,
1652057 ,
1760129 ,
1926243 ,
2064523 ,
998192  ,
96504 ,
326279  ,
1156155 ,
1401601 ,
331284  ,
410496  ,
884260  ,
997940  ,
105151  ,
224982  ,
773058  ,
1823549 ,
232689  ,
2016150 ,
103653  ,
741411  ,
1363727 ,
1574616 ,
174785  ,
174818  ,
427544  ,
491520  ,
726121  ,
849521  ,
1418361 ,
1454086 ,
67063 ,
702236  ,
1245273 ,
1573358 ,
1743546 ,
730430  ,
846631  ,
1258137 ,
1562922 ,
1953744 ,
558149  ,
1217112 ,
1727869 ,
17914 ,
171132  ,
603629  ,
656123  ,
939665  ,
1039702 ,
1695977 ,
159418  ,
1721166 ,
1994315 ,
2022703 ,
813641  ,
871672  ,
284296  ,
934929  ,
963275  ,
1118450 ,
1923055 ,
10371 ,
73245 ,
638913  ,
867873  ,
1022384 ,
1088533 ,
1695521 ,
1866264 ,
1950381 ,
111845  ,
675612  ,
698132  ,
1202957 ,
1547652 ,
1644063 ,
1817444 ,
179386  ,
668662  ,
766183  ,
766528  ,
900405  ,
1010543 ,
1475524 ,
1595210 ,
1689641 ,
2044615 ,
274045  ,
570267  ,
956339  ,
1293978 ,
1320383 ,
184573  ,
1589559 ,
1657440 ,
295558  ,
469296  ,
875548  ,
1174929 ,
41879 ,
459917  ,
874070  ,
925094  ,
1143814 ,
1207988 ,
1912459 ,
269197  ,
286746  ,
1027812 ,
1106618 ,
1145752 ,
1257635 ,
1273322 ,
1279087 ,
1318220 ,
1629394 ,
1771245 ,
1843161 ,
2090883 ,
352434  ,
365667  ,
565351  ,
939891  ,
1636226 ,
1760383 ,
2019668 ,
471413  ,
662174  ,
885675  ,
995301  ,
1838691 ,
1901189 ,
2047233 ,
2050707 ,
308387  ,
710220  ,
1288335 ,
1865730 ,
100174  ,
246199  ,
612084  ,
1082862 ,
1099386 ,
1362210 ,
1693514 ,
1741651 ,
227163  ,
232274  ,
349848  ,
665529  ,
992800  ,
1272536 ,
1346459 ,
1604756 ,
1690345 ,
1737684 ,
864018  ,
1106029 ,
1380475 ,
2066168 ,
2075534 ,
46326 ,
855830  ,
1180289 ,
1947812 ,
69348 ,
791139  ,
1016471 ,
1562191 ,
1574806 ,
1729573 ,
69530 ,
73436 ,
390887  ,
591107  ,
775678  ,
1233506 ,
1234191 ,
1358002 ,
1365563 ,
1515197 ,
1977746 ,
37693 ,
168703  ,
231065  ,
234387  ,
319867  ,
822936  ,
1164505 ,
1275173 ,
1562534 ,
1946929 ,
73058 ,
651950  ,
837989  ,
851838  ,
1059549 ,
1133806 ,
1632922 ,
1703818 ,
1932219 ,
345707  ,
470906  ,
531144  ,
539385  ,
551078  ,
637544  ,
844319  ,
1087254 ,
1946546 ,
176894  ,
198118  ,
313835  ,
414954  ,
1253108 ,
1281941 ,
1382854 ,
1698283 ,
87264 ,
674952  ,
677612  ,
969502  ,
1045234 ,
1107698 ,
1233318 ,
1491271 ,
1808716 ,
1860913 ,
248437  ,
650064  ,
892885  ,
958886  ,
1209628 ,
1936551 ,
626101  ,
885299  ,
1128427 ,
1230079 ,
1243677 ,
1276675 ,
1629621 ,
1740991 ,
2047018 ,
66039 ,
595748  ,
649692  ,
1081927 ,
1299176 ,
1379586 ,
1783991 ,
217385  ,
410149  ,
562597  ,
1968164 ,
1988755 ,
2087553 ,
51893 ,
183920  ,
229683  ,
272624  ,
297403  ,
590785  ,
635075  ,
841552  ,
859113  ,
1182901 ,
1326863 ,
1523396 ,
1687029 ,
1931368 ,
240120  ,
1060589 ,
1649471 ,
1863437 ,
123962  ,
793703  ,
1107890 ,
1675069 ,
865729  ,
1246785 ,
2037429 ,
115680  ,
211020  ,
522711  ,
856425  ,
1028556 ,
1295204 ,
1416673 ,
1432249 ,
1519004 ,
1648997 ,
1724998 ,
80317 ,
270842  ,
626699  ,
1039362 ,
1051684 ,
1976367 ,
95353 ,
795970  ,
1121586 ,
1185685 ,
1667873 ,
180539  ,
612957  ,
855712  ,
999011  ,
1580124 ,
1807119 ,
168789  ,
424481  ,
473436  ,
916428  ,
969955  ,
1013683 ,
1365332 ,
1687109 ,
2067907 ,
810392  ,
1513120 ,
1540944 ,
1679381 ,
1874792 ,
1993152 ,
71472 ,
163330  ,
350758  ,
1620753 ,
1647214 ,
306076  ,
398618  ,
513541  ,
533015  ,
1242773 ,
1353156 ,
1954532 ,
1991023 ,
2060916 ,
427660  ,
647751  ,
1035709 ,
1727579 ,
2039166 ,
43833 ,
189481  ,
233616  ,
503970  ,
639721  ,
745640  ,
1483941 ,
1535130 ,
1629590 ,
1187902 ,
1512997 ,
1713332 ,
1819553 ,
110075  ,
714238  ,
765755  ,
1144228 ,
1220077 ,
1714092 ,
1730482 ,
942451  ,
2000496 ,
370075  ,
738239  ,
827020  ,
928330  ,
1197774 ,
1599181 ,
1882651 ,
275872  ,
291511  ,
659383  ,
1940907 ,
2050303 ,
247384  ,
579661  ,
1508277 ,
1939735 ,
737536  ,
2079904 ,
525690  ,
535082  ,
896394  ,
1982133 ,
1447331 ,
1523933 ,
2010176 ,
365191  ,
391338  ,
498009  ,
660200  ,
1617284 ,
669571  ,
1058571 ,
1119534 ,
1378617 ,
692898  ,
712357  ,
1517802 ,
283252  ,
685539  ,
1878167 ,
268563  ,
434962  ,
461118  ,
870379  ,
1330769 ,
1382429 ,
1400270 ,
1452626 ,
1527648 ,
1196426 ,
1687776 ,
1688081 ,
20448 ,
569764  ,
725019  ,
1794634 ,
1940081 ,
304586  ,
399477  ,
923760  ,
1565062 ,
328117  ,
504304  ,
614566  ,
709279  ,
557868  ,
1910777 ,
386790  ,
879813  ,
8672  ,
1524136 ,
1697086 ,
921294  ,
1426952 ,
1514367 ,
231643  ,
620478  ,
520054  ,
797872  ,
1789736 ,
1947176 ,
1363381 ,
1732683 ,
1061778 ,
1525103 ,
46423 ,
317580  ,
639466  ,
1390240 ,
1980626 ,
127426  ,
1019609 ,
1369240 ,
1375106 ,
1455313 ,
1367258 ,
1564534 ,
1652892 ,
590966  ,
704004  ,
310080  ,
1616612 ,
43513 ,
896242  ,
1998550 ,
1284163 ,
1212680 ,
266867  ,
714084  ,
1870869 ,
1085383 ,
1182208 ,
1297787 ,
2056236 ,
959623  ,
1007694 ,
2078034 ,
1061215 ,
1363415 ,
1789454 ,
162509  ,
297504  ,
1744199 ,
938463  ,
340936  ,
137622  ,
1618745 ,
107173  ,
725559  ,
1117699 ,
1230993 ,
989161  ,
510394  ,
825258  ,
1635641 ,
1199860 ,
595511  ,
396030  ,
1999729 ,
186358  ,
1614473 ,
1265839 ,
315002  ,
1058885 ,
333252  ,
1229384 ,
1846978 ,
1975667 ,
346310  ,
380279  ,
723831  ,
927280  ,
667963  ,
306905  ,
657215  ,
17612 ,
661980  ,
733929  ,
1452427 ,
7339  ,
535691  ,
487752  ,
617164  ,
1078699 ,
1394901 ,
1323723 ,
1983777 ,
2017643 ,
1058549 ,
288050  ,
1947928 ,
178304  ,
640904  ,
1386541 ,
1765818 ,
1932928 ,
1856019 ,
366288  ,
494296  ,
1456874 ,
505852  ,
1053224 ,
2672  ,
444761  ,
816938  ,
1397469 ,
1813824 ,
409939  ,
1013602 ,
1675667 ,
1089790 ,
596234  ,
1448056 ,
127037  ,
744541  ,
1528090 ,
1938066 ,
673451  ,
1563928 ,
1980139 ,
445806  ,
666534  ,
2045913 ,
564947  ,
679297  ,
941146  ,
161395  ,
1505024 ,
263633  ,
64304 ,
1448061 ,
1764441 ,
919935  ,
135051  ,
1464748 ,
580064  ,
630587  ,
711179  ,
1922244 ,
1124046 ,
1254510 ,
1786133 ,
1595318 ,
230498  ,
393107  ,
1319602 ,
1455959 ,
1412224 ,
839308  ,
1885933 ,
205691  ,
1324567 ,
1566170 ,
937230  ,
1297877 ,
1564521 ,
176423  ,
620186  ,
1731054 ,
2049559 ,
738277  ,
1171069 ,
1258290 ,
1875935 ,
1687201 ,
580635  ,
1744503 ,
271995  ,
1444056 ,
544881  ,
1248261 ,
504575  ,
444898  ,
587206  ,
670542  ,
1209234 ,
1195307 ,
184333  ,
821075  ,
1192794 ,
1596719 ,
1984246 ,
739695  ,
1509021 ,
778784  ,
119477  ,
1998032 ,
601331  ,
728622  ,
126182  ,
667374  ,
1235878 ,
1445238 ,
10019 ,
314102  ,
1136675 ,
1381640 ,
1530719 ,
539865  ,
85750 ,
600044  ,
1773176 ,
1350922 ,
1683311 ,
420345  ,
557544  ,
689330  ,
1638051 ,
1713404 ,
142394  ,
462736  ,
999107  ,
1463759 ,
62001 ,
546825  ,
649981  ,
922325  ,
494254  ,
624372  ,
1549219 ,
837587  ,
872825  ,
841314  ,
1469128 ,
1587254 ,
1174742 ,
802526  ,
845597  ,
788040  ,
813863  ,
1588767 ,
94067 ,
105229  ,
357179  ,
883344  ,
1781105 ,
1678214 ,
1510967 ,
331408  ,
1317574 ,
1429989 ,
1971223 ,
1903719 ,
1696241 ,
800878  ,
532424  ,
916602  ,
1500409 ,
644244  ,
1597848 ,
690597  ,
1180630 ,
1047819 ,
1658699 ,
757419  ,
1075446 ,
405929  ,
385687  ,
113536  ,
695020  ,
449821  ,
439105  ,
1997596 ,
549727  ,
1678204 ,
2093891 ,
1875369 ,
820425  ,
1413637 ,
1742829 ,
88388 ,
686158  ,
302771  ,
546233  ,
6110  ,
861939  ,
1880065 ,
507501  ,
1823484 ,
518531  ,
910527  ,
229952  ,
1809285 ,
1592997 ,
1607917 ,
353069  ,
383458  ,
459445  ,
309261  ,
1385557 ,
1730554 ,
2049819 ,
941 ,
18121 ,
1108483 ,
1532160 ,
923097  ,
1006895 ,
263393  ,
736972  ,
1526716 ,
474236  ,
557591  ,
268856  ,
602428  ,
1668783 ,
1488905 ,
241972  ,
544838  ,
833129  ,
266580  ,
419467  ,
67102 ,
431836  ,
1325405 ,
855567  ,
374745  ,
1367089 ,
798854  ,
1525028 ,
687631  ,
1751670 ,
452530  ,
10089 ,
31954 ,
1894702 ,
1914739 ,
13052 ,
931476  ,
1178625 ,
1612584 ,
551928  ,
78603 ,
1329291 ,
1862586 ,
166806  ,
1584300 ,
1942120 ,
483812  ,
1014505 ,
161406  ,
405703  ,
1088488 ,
1873375 ,
2042862 ,
367517  ,
1871817 ,
2018848 ,
226280  ,
1170377 ,
1205461 ,
1432488 ,
1772176 ,
848941  ,
1138286 ,
678642  ,
4828  ,
592391  ,
938197  ,
963448  ,
1260667 ,
2069587 ,
242900  ,
1945731 ,
626177  ,
947258  ,
73216 ,
651835  ,
174727  ,
1261486 ,
1416116 ,
1180901 ,
1937657 ,
1138420 ,
414676  ,
835642  ,
1638566 ,
755822  ,
1196711 ,
1813380 ,
18134 ,
942846  ,
1357174 ,
1711423 ,
1764153 ,
686826  ,
1509340 ,
618278  ,
1778371 ,
2095583 ,
1080655 ,
1495961 ,
1754702 ,
1425469 ,
11810 ,
1363807 ,
521065  ,
659085  ,
579220  ,
646215  ,
1925213 ,
1944495 ,
1084500 ,
1788413 ,
1295158 ,
1353005 ,
1351556 ,
1799033 ,
1177549 ,
1246530 ,
561890  ,
1979024 ,
455752  ,
651614  ,
889064  ,
1852766 ,
1935883 ,
1756654 ,
731228  ,
1712731 ,
72385 ,
1429549 ,
1393239 ,
1912012 ,
299728  ,
1061455 ,
2083613 ,
1528665 ,
408230  ,
970012  ,
822246  ,
258314  ,
1881823 ,
848800  ,
1631284 ,
875692  ,
1596977 ,
1901765 ,
288909  ,
990529  ,
73832 ,
1249417 ,
1274841 ,
1861552 ,
904030  ,
585760  ,
830648  ,
1494148 ,
1116385 ,
468242  ,
480467  ,
1993568 ,
538702  ,
193621  ,
779535  ,
664389  ,
707627  ,
574013  ,
1914254 ,
1574967 ,
1636826 ,
500451  ,
1578455 ,
1803705 ,
426427  ,
863925  ,
1988049 ,
652484  ,
1246650 ,
1656601 ,
1706832 ,
280592  ,
733475  ,
1735326 ,
1668273 ,
1322523 ,
1743471 ,
1141064 ,
149057  ,
2042333 ,
35589 ,
724433  ,
1419751 ,
25883 ,
173339  ,
1180958 ,
1874534 ,
25802 ,
140029  ,
338530  ,
1567047 ,
1673153 ,
193689  ,
324556  ,
1835505 ,
1455873 ,
1221753 ,
2085655 ,
297336  ,
613142  ,
2079003 ,
570711  ,
658416  ,
1822174 ,
2035914 ,
737782  ,
818140  ,
1382417 ,
1906865 ,
1267964 ,
1952341 ,
1589400 ,
204101  ,
280439  ,
2076701 ,
616205  ,
697057  ,
794748  ,
4908  ,
238547  ,
1743366 ,
1923192 ,
1065491 ,
437652  ,
998481  ,
1305795 ,
1743350 ,
1552214 ,
1758610 ,
1822171 ,
1184365 ,
148043  ,
710414  ,
1955205 ,
1461327 ,
1333640 ,
2057936 ,
1944302 ,
1971852 ,
1154872 ,
1428997 ,
1133935 ,
1549361 ,
206661  ,
217614  ,
900022  ,
1409736 ,
1373006 ,
667078  ,
829110  ,
524677  ,
1912164 ,
511389  ,
1154043 ,
1522107 ,
1383548 ,
1710420 ,
128920  ,
302897  ,
40608 ,
1987765 ,
1195226 ,
211284  ,
24136 ,
1173915 ,
1108132 ,
1161488 ,
220592  ,
1878687 ,
129457  ,
1323375 ,
1397942 ,
872243  ,
1527872 ,
1731552 ,
974601  ,
116009  ,
1563653 ,
196239  ,
1360715 ,
26866 ,
614267  ,
410025  ,
303603  ,
1028085 ,
735424  ,
127569  ,
560114  ,
1960107 ,
539386  ,
1690335 ,
1646758 ,
1310766 ,
868659  ,
1823310 ,
1739186 ,
258535  ,
1223224 ,
1234713 ,
534277  ,
703402  ,
1718408 ,
1750125 ,
983693  ,
1198534 ,
1738212 ,
821572  ,
1216465 ,
703792  ,
1170077 ,
1332962 ,
973062  ,
289181  ,
1521668 ,
580461  ,
985107  ,
2094648 ,
704378  ,
1089957 ,
1970360 ,
1342819 ,
932874  ,
1587850 ,
988776  ,
2074966 ,
1132076 ,
936244  ,
1660523 ,
1062596 ,
197811  ,
661319  ,
1595784 ,
758067  ,
682629  ,
1511459 ,
119934  ,
1109689 ,
97241 ,
186682  ,
1836866 ,
1284436 ,
647535  ,
1067572 ,
883302  ,
1020418 ,
1381453 ,
996760  ,
593615  ,
1496683 ,
575771  ,
1611783 ,
1093721 ,
643918  ,
1901680 ,
637018  ,
1304658 ,
1841960 ,
345382  ,
1623490 ,
1412631 ,
1492679 ,
2001739 ,
248178  ,
151265  ,
265730  ,
764255  ,
572089  ,
1494697 ,
2081231 ,
1909047 ,
509358  ,
682679  ,
1831128 ,
1821472 ,
983590  ,
1626629 ,
1435805 ,
801862  ,
750143  ,
1267918 ,
1763807 ,
300315  ,
2091832 ,
1860181 ,
1800174 ,
1319731 ,
1127694 ,
977669  ,
218279  ,
140461  ,
986021  ,
32672 ,
918404  ,
199078  ,
203445  ,
795257  ,
1862455 ,
1381070 ,
238279  ,
1125646 ,
125303  ,
1822625 ,
258503  ,
1578523 ,
190992  ,
1262713 ,
1773283 ,
804851  ,
393354  ,
1251090 ,
912895  ,
686348  ,
1897980 ,
1919714 ,
1932220 ,
1616474 ,
545873  ,
1048798 ,
1739364 ,
432283  ,
538957  ,
1615550 ,
1042280 ,
1479571 ,
1759022 ,
1691480 ,
698208  ,
1497676 ,
1707585 ,
832662  ,
1837146 ,
58017 ,
1117298 ,
864973  ,
1836075 ,
1607547 ,
1696753 ,
774775  ,
1817739 ,
81689 ,
109455  ,
1684033 ,
1801335 ,
1071678 ,
1172390 ,
1297882 ,
401428  ,
1255453 ,
1627198 ,
37330 ,
596587  ,
1745223 ,
1813262 ,
476970  ,
448873  ,
674611  ,
943737  ,
1618056 ,
98371 ,
148882  ,
1075494 ,
1030195 ,
901297  ,
1241725 ,
1687983 ,
1298361 ,
173102  ,
1346096 ,
437544  ,
721255  ,
769381  ,
1227574 ,
1848529 ,
355680  ,
823913  ,
549003  ,
1911267 ,
1414966 ,
209832  ,
1388022 ,
897257  ,
996268  ,
897556  ,
1547150 ,
889291  ,
760596  ,
1848663 ,
99609 ,
1263311 ,
864019  ,
1297648 ,
1119337 ,
1029726 ,
1624321 ,
275317  ,
998420  ,
292049  ,
65109 ,
1636010 ,
636911  ,
1902375 ,
1176719 ,
1981617 ,
1424087 ,
1991646 ,
94185 ,
1607944 ,
776705  ,
356540  ,
467299  ,
644063  ,
1513573 ,
1846280 ,
2017474 ,
38398 ,
509441  ,
1060157 ,
1289734 ,
164603  ,
580336  ,
973665  ,
428815  ,
1871332 ,
83986 ,
1375289 ,
1094296 ,
821837  ,
1862567 ,
818164  ,
1959217 ,
412610  ,
1576297 ,
865155  ,
1090219 ,
1379128 ,
824453  ,
774798  ,
767374  ,
1996962 ,
374355  ,
2026615 ,
104177  ,
180883  ,
521397  ,
523606  ,
444532  ,
1325295 ,
1749548 ,
2018684 ,
477978  ,
539907  ,
304161  ,
1732392 ,
1639202 ,
2089499 ,
2015129 ,
1622104 ,
1024085 ,
485743  ,
2046348 ,
880807  ,
1108000 ,
1509307 ,
36450 ,
1050928 ,
1549439 ,
245969  ,
2057133 ,
734861  ,
1208151 ,
1368389 ,
2041384 ,
1678060 ,
1197899 ,
798869  ,
1584066 ,
1772919 ,
516262  ,
444297  ,
839736, 1278894, "external"]  //largeFreqID -outliers
=======
  var groups = [];
>>>>>>> d4c26ca8980a6562acad8351b382cf8a081d5755


  // @input param = data
  // @output = uniqueIdList = visitorList
  function generateUniqueIdList(data, dataRange)
  {
    function VisitorObject(id,firstSeen,isSender, location, to){
      var retObject = {
                        id: id,
                        firstSeen: firstSeen, //timestamp
                        lastSeen: firstSeen,  //timestamp
                        sendFrequency: 0,
                        receiveFrequency: 0,
                        sendIdList: [],
                        sendIdCount: 0,
                        sendLocationFrequency: {"Kiddie Land": 0, "Entry Corridor": 0, "Tundra Land": 0, "Wet Land": 0, "Coaster Alley": 0}
                      };
      if (isSender) {
        retObject.sendFrequency = 1;
        retObject.sendLocationFrequency[location] = 1;
        retObject.sendIdList.push(to);
        retObject.sendIdCount=1;
      }
      else {
        retObject.receiveFrequency = 1;
      }
      return retObject;
    }

    // for each row in table
    for (var i=0; i<dataRange; ++i) {
      if (data[i].to==="external") {
        //console.log("external ignored");
        continue;
      }
      var isIdUnique = true;
      var isIDOutlier=false;

      // identify unique IDs by source from call source
      for (var j=0; j<uniqueIdList.length; ++j){
        if (uniqueIdList[j].id===data[i].from) {
          isIdUnique = false;
          uniqueIdList[j]["lastSeen"] = data[i].Timestamp;
          uniqueIdList[j]["sendFrequency"] +=1;
          uniqueIdList[j]["sendLocationFrequency"][data[i].location] +=1;
          // push to sendIdList, if it is unique
          isSendIdUnique=true;
          for (var k=0; k<uniqueIdList[j]["sendIdList"].length; ++k) {
            if(uniqueIdList[j]["sendIdList"][k]===data[i].to) {
              isSendIdUnique=false;
              break;
            }
          }
          if (isSendIdUnique) {
            uniqueIdList[j]["sendIdList"].push(data[i].to);
            uniqueIdList[j]["sendIdCount"]+=1;
          }

          break;
        }
      }
      if (isIdUnique) {
        // register as sender
<<<<<<< HEAD
        
        for(var j=0; j<outlierList.length; ++j){
          if(data[i].from==outlierList[j]){
           console.log("isOutlier "+data[i].from);
            isIDOutlier=true;
          }
        }
        if(isIDOutlier==false){
          uniqueIdList.push(VisitorObject(data[i].from, data[i].Timestamp, true, data[i].location));
        }
        isIDOutlier=false;
=======
        uniqueIdList.push(VisitorObject(data[i].from, data[i].Timestamp, true, data[i].location, data[i].to));
>>>>>>> d4c26ca8980a6562acad8351b382cf8a081d5755
      }

      isIdUnique = true;
      // identify unique IDs by call destination
      for (var j=0; j<uniqueIdList.length; ++j){
        if (uniqueIdList[j].id===data[i].to) {
          isIdUnique = false;
          uniqueIdList[j]["lastSeen"] = data[i].Timestamp;
          uniqueIdList[j]["receiveFrequency"] +=1;
          break;
        }
      }
      if (isIdUnique) {
        // register as recipient
        isIDOutlier=false;
        for(var j=0; j<outlierList.length; ++j){
          if(data[i].to==outlierList[j]){
           console.log("isOutlier "+data[i].to);
            isIDOutlier=true;
          }
        }
        if(!isIDOutlier){
          uniqueIdList.push(VisitorObject(data[i].to, data[i].Timestamp, false, data[i].location));
        }
        isIDOutlier=false;
      }

      if (i%1000==0)    // just to keep up with the progress of algorithm
        console.log("unique ID count so far = "+uniqueIdList.length);
    }

    console.log("unique ID count = "+uniqueIdList.length);
    console.log(uniqueIdList);
    //console.log(JSON.stringify(uniqueIdList));

  }

  // @output = edge = {sourceId, targetId, timeStamp, location}
  function generateD3Edges(data, dataRange, visitorList) {
    function D3Edge(src, tgt, val){
      var retObject = {
                        source: src,
                        target: tgt,
                        frequency: val,
                      };
      return retObject;
    }
    //console.log(data);

    for (var i=0; i<dataRange; ++i)
    {
      if (data[i].to==="external") {
        //console.log("external ignored");
        continue;
      }
      // find source index
      var sourceIndex = -1;
      for (var j=0; j<visitorList.length; ++j){
        if (data[i].from===visitorList[j].id)
          sourceIndex = j;
      }

      // find target index
      var targetIndex = -1;
      for (var j=0; j<visitorList.length; ++j){
        if (data[i].to===visitorList[j].id)
          targetIndex = j;
      }

      // no such edge found
      if (sourceIndex==-1 || targetIndex==-1)
        continue;

      // check for duplicate source & target
      var newEdge = true;
      for (var j=0; j<d3Edges.length; ++j){
        if (d3Edges[j].source == sourceIndex && d3Edges[j].target == targetIndex
          || d3Edges[j].source == targetIndex && d3Edges[j].target == sourceIndex) {
          newEdge = false;
          d3Edges[j]["frequency"] +=1;
          break;
        }
      }
      if (newEdge)
        d3Edges.push(D3Edge(sourceIndex, targetIndex, 1));

      if (i%1000==0)    // just to keep up with the progress of algorithm
        console.log("edges count so far = "+d3Edges.length);
    }

    console.log("edges count = "+d3Edges.length);
    console.log(d3Edges);
    //console.log(JSON.stringify(d3Edges));



  }

  function generateGroupings(data, dataRange, visitorList) {
    function Group(idString) {
      var retObject = {
                        idList: [idString],
                        frequency: 0   //aggregate communication frequency
                      }
      return retObject;
    }

    // initialize list of groupings
    for (var i=0; i<visitorList.length; ++i) {
      groups.push(Group(visitorList[i].id));
    }
    console.log(groups);

    for (var i=0; i<dataRange; ++i) {
      var sameGroup = true;
      var senderGroup = -1;
      var recepientGroup = -1;
      if (data[i].to==="external") {
        // ignore all extern recepients
        //console.log("ignore extern");
        continue;
      }

      for (var j=0; j<groups.length; ++j) {
        for (var k=0; k<groups[j].idList.length; ++k) {
          if (groups[j].idList[k]===data[i].from) {
            senderGroup = j;
          }
          if (groups[j].idList[k]===data[i].to) {
            recepientGroup = j;
          }
        }
      }
      if (senderGroup==-1 || recepientGroup==-1) {
        console.log("ERROR in finding visitor ID, terminating..");
        break;
      }
      if (senderGroup!=recepientGroup) {
        //console.log(data[i].from+", "+data[i].to+" joins group "+senderGroup+" and "+recepientGroup);
        var groupsTemp = groups[recepientGroup];
        for (var j=0; j<groupsTemp.idList.length; ++j) {
          groups[senderGroup].idList.push(groupsTemp.idList[j]);
        }

        groups[senderGroup].frequency+=1; // add to frequency
        groups[senderGroup].frequency+=groups[recepientGroup].frequency; // add to frequency
        groups.splice(recepientGroup,1);
      }
      else {
        groups[senderGroup].frequency+=1; // add to frequency
      }

      if (i%1000==0)    // just to keep up with the progress of algorithm
        console.log("groups count so far = "+groups.length);
    }


  }

  // callback function after loading is done. This function manages {data} from loadData()
  function handleData(day){
    console.log("okay loaded!!");
    //console.log(data.Fri);
<<<<<<< HEAD
    generateUniqueIdList(data[day], 948739);
    generateD3Edges(data[day], 948739, uniqueIdList);
=======
    generateUniqueIdList(data[day], 2);//data[day].length);
    //generateD3Edges(data[day], data[day].length, uniqueIdList);
    generateGroupings(data[day], 2, uniqueIdList);
>>>>>>> d4c26ca8980a6562acad8351b382cf8a081d5755
    document.getElementById("data-container").innerHTML=JSON.stringify({"nodes": uniqueIdList,"links":d3Edges})

  }



// okay here we go
  var days = ["Fri","Sat","Sun"];
  var loadCompleted = false;
  function loadData(data, counter) {
    var fileName = "/data/comm-data-" + days[counter] + ".csv";
    if (!data[days[counter]]) {
      console.log("Need to load data for " + days[counter]);
      d3.csv("/data/comm-data-"+days[counter]+".csv", function(loaded) {
        data[days[counter]] = loaded;
        console.log("Data Load Done. Total Row:" + data[days[counter]].length);
        if (counter>0)
          loadData(data, counter-1);
        else {
            loadCompleted=true;
            generateGraph(data["Fri"], data["Fri"][1000]["Timestamp"], data["Fri"][2000]["Timestamp"], ["1248270"], ["Wet Land"])
        }
      });
    }
    else {
      console.log("Already Loaded");
    }
  };

  loadData(data, 2);

  var nodes = [];
  var edges = [];

  // example 1: generateGraph(data["Fri"], timeStamp, null, null);
  // example 2: generateGraph(data["Fri"], timeStamp, ["1234","4534"], null);
  // data, startTime and endTime need to be passed. Oter parameters are used as additional filters
  function generateGraph(data, startTime, endTime, idList, locationList) {
    if (!loadCompleted)
      return;
    function VisitorObject(id,firstSeen,isSender, location, to){
      var retObject = {
                        id: id,
                        firstSeen: firstSeen, //timestamp
                        lastSeen: firstSeen,  //timestamp
                        sendFrequency: 0,
                        receiveFrequency: 0,
                        sendLocationFrequency: {"Kiddie Land": 0, "Entry Corridor": 0, "Tundra Land": 0, "Wet Land": 0, "Coaster Alley": 0}
                      };
      if (isSender) {
        retObject.sendFrequency = 1;
        retObject.sendLocationFrequency[location] = 1;
      }
      else {
        retObject.receiveFrequency = 1;
      }
      return retObject;
    }

    //console.log("StartTime = "+new Date(startTime));
    var indexOnStartTime = 0;
    while ((new Date(data[indexOnStartTime]["Timestamp"])).getTime()<(new Date(startTime)).getTime()) {
      indexOnStartTime++;
    }
    var indexOnEndTime = indexOnStartTime;
    while ((new Date(data[indexOnEndTime]["Timestamp"])).getTime()<=(new Date(endTime)).getTime()) {
      indexOnEndTime++;
    }

    console.log("indexOnStartTime = "+indexOnStartTime);
    console.log("indexOnEndTime = "+indexOnEndTime);

    // for each row in table
    for (var i=indexOnStartTime; i<indexOnEndTime; ++i) {
      // filter out data by idList and locationList
      if (idList) {
        var idFound = false;
        for (var j=0; j<idList.length; ++j) {
          if (idList[j]===data[i].from || idList[j]===data[i].to) {
            idFound=true;
            break;
          }
        }
        // skip this row
        if (!idFound) {
          continue;
        }
      }
      if (locationList) {
        var locFound = false;
        for (var j=0; j<locationList.length; ++j) {
          if (locationList[j]===data[i].location) {
            locFound=true;
            break;
          }
        }
        // skip this row
        if (!locFound) {
          continue;
        }
      }


      var isIdUnique = true;
      // identify unique IDs by source from call source
      for (var j=0; j<nodes.length; ++j){
        if (nodes[j].id===data[i].from) {
          isIdUnique = false;
          nodes[j]["lastSeen"] = data[i].Timestamp;
          nodes[j]["sendFrequency"] +=1;
          nodes[j]["sendLocationFrequency"][data[i].location] +=1;
          break;
        }
      }
      if (isIdUnique) {
        // register as sender
        nodes.push(VisitorObject(data[i].from, data[i].Timestamp, true, data[i].location, data[i].to));
      }

      isIdUnique = true;
      // identify unique IDs by call destination
      for (var j=0; j<nodes.length; ++j){
        if (nodes[j].id===data[i].to) {
          isIdUnique = false;
          nodes[j]["lastSeen"] = data[i].Timestamp;
          nodes[j]["receiveFrequency"] +=1;
          break;
        }
      }
      if (isIdUnique) {
        // register as recipient
        nodes.push(VisitorObject(data[i].to, data[i].Timestamp, false, data[i].location));
      }

      if (i%1000==0)    // just to keep up with the progress of algorithm
        console.log("nodes count so far = "+nodes.length);
    }
    console.log("nodes count = "+nodes.length);
    console.log(nodes);



  }
})();
